#+AUTHOR: Mohamed Tarek
#+EMAIL: m96tarek@gmail.com


* Introduction:
a Django REST project, a peer-to-peer lending platform.
The project facilitates the loan application and approval process, including the management of loan funding and repayment

* Use Case:
One of the borrowers has submitted a loan request for $5,000 to be repaid over 6 months. They have received an offer from one of the lenders on the platform with a 15% Annual Interest Rate. Additionally, a $3.75 fee will be added to the total loan amount to be paid by the lender.

* installation & usage:
** Requirements:
- python > 3.9
- postgreSQL
  + these instructions assume that you have postgreSQL installed and the server running
- poetry (optional)
  + there's a requirements file for non poetry users

** Instructions:
*** First, we need to clone this repo locally:
#+begin_src sh
git clone https://github.com/xeros-and-ones/lending-platform-django.git
#+end_src

*** we ~cd~ into the clone directory
#+begin_src shell
cd path/to/project/directory
#+end_src

*** init a virtual environment in the root project directory where the =requirements.txt= exists
**** for poetry:
Simply Run
#+begin_src shell
poetry install
#+end_src

**** or you can use python's venv:
#+begin_src shell
python -m venv .venv
#+end_src

*** installing dependecies:
poetry users already have installed the dependecies via the =pyproject.toml=

**** for venv users, the next step, is to source the venv
***** Linux
#+begin_src shell
source .venv/bin/activate
#+end_src

***** Windows
#+begin_src shell
.\.venv\Sripts\activate
#+end_src


**** then to install the dependecies, run:
#+begin_src shell
pip install -r requirements.txt
#+end_src

*** creating =.env= file in the root project directory for the secrets:
-remove the comments and your personal data from the database
#+begin_src shell
SECRET_KEY=django-insecure-r%-n+$usr!f6=!ke)nu_vsg$p-qoi9200^y2yuk@40&l(9uqbx
DEBUG=True
DB_NAME= #<name of database you created>
DB_USER=postgres
DB_PASSWORD= #<password you create>
DB_HOST= #<host_name>
DB_PORT= #<port>
#+end_src

** Development Server:
to run the django development server:

from the project root directory

  ~cd~ into the inner project directory
  #+begin_src shell
  cd lenme_django
  #+end_src

Now we can run the server by:
#+begin_src shell
python manage.py runserver
#+end_src


* endpoints:
you can simply:
#+begin_src
https://localhost:8000/docs/
#+end_src

there are 8 api endpoints and 2 payment api endpoints
** API:
*** POST: ~/api/borrower/create~
used to create new borrowers

*** POST: ~/api/investor/create~
used to create investors

*** GET: ~/api/borrower/view~
used to view the list of borrowers from the database

*** GET: ~/api/investor/view~
used to view the list of investors from the database

*** POST ~/api/borrower/loan~
the borrower uses it to request a loan

*** POST ~/api/investor/offer~
the investor uses it to make an offer to the borrower's loan

*** POST ~/api/borrower/accept-offer~
the borrower uses it to accept the investor's offer

*** POST ~/api/investor/can-fund~
a mock endpoint to check if the investors meets the requirements to fund the loan.
NOTE: it doesn't not affect or change the database

** PAYMENT:
*** POST ~/payment/~
the borrower uses it for the monthly payments

*** POST ~/payment/sim~
a mock endpoint to simulate the full payment process over the course of the loan's period

* database schema:
there are 5 database tables:
- =borrowers=:
  this holds the created borrowers through ~/api/borrower/create~

- =investors=:
  this holds the created investors through ~/api/investor/create~
  - balance is added manually through the endpoint

- =loan=:
  this holds the loan objects created through ~/api/borrower/loan~

- =offer=:
  this holds the offers made by investors through ~/api/investor/offer~

- =pendingoffers=:
  this table works as a caching system for loans pending offers.
  it's automatically populated with every offer made until the offer's status changes to "Accepted"
* Tests:
django has a builtin unittesting module based on python's own unittest.
So to run tests, simply run:
#+begin_src shell
python manage.py test api_loans
#+end_src

optionally, you could add ~--verbosity=2~ flag to see verbose info about what's happening
